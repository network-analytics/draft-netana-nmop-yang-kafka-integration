<?xml version="1.0" encoding="US-ASCII"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<?rfc toc="yes"?>
<?rfc tocompact="yes"?>
<?rfc tocdepth="2"?>
<?rfc tocindent="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<?rfc comments="yes"?>
<?rfc inline="yes"?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<rfc category="info" docName="draft-netana-nmop-yang-kafka-integration-00"
     ipr="trust200902">
  <front>
    <title abbrev="YANG-Push to Apache Kafka Integration">An Architecture for
    YANG-Push to Apache Kafka Integration</title>

    <author fullname="Thomas Graf" initials="T" surname="Graf">
      <organization>Swisscom</organization>

      <address>
        <postal>
          <street>Binzring 17</street>

          <city>Zurich</city>

          <code>8045</code>

          <country>Switzerland</country>
        </postal>

        <email>thomas.graf@swisscom.com</email>
      </address>
    </author>

    <date day="18" month="February" year="2024"/>

    <area>Operations and Management</area>

    <workgroup>NMOP</workgroup>

    <abstract>
      <t>This document describes the motivation and architecture of a native
      YANG-Push notifications and YANG Schema integration into Apache Kafka
      Message Broker and YANG Schema Registry.</t>
    </abstract>

    <note removeInRFC="true">
      <name>Discussion Venues</name>

      <t>Discussion of this document takes place on the Operations and
      Management Area Working Group Working Group mailing list
      (nmop@ietf.org), which is archived at <eref
      target="https://mailarchive.ietf.org/arch/browse/nmop/"/>.</t>

      <t>Source for this draft and an issue tracker can be found at <eref
      target="https://github.com/network-analytics/draft-daisy-kafka-yang-integration/"/>.</t>
    </note>
  </front>

  <middle>
    <section anchor="Introduction" title="Introduction">
      <t>Nowadays network operators are using <xref
      target="RFC7950">YANG</xref> to model their configurations and obtain
      YANG modelled data from their networks. It is well understood that plain
      text are initially intended for humans and need effort to make it
      machine readable due to the lack of semantics. YANG modeled data is
      addressing this need.</t>

      <t>Increasingly more network operators organizing their data in a <xref
      target="Deh22">Data Mesh</xref> where a message broker such as <xref
      target="Kaf11">Apache Kafka</xref> or <xref
      target="Rab07">RabbitMQ</xref> facilitates the exchange of messages
      among data processing components like a stream processor to filter,
      enrich, correlate or aggregate, or a time series database to store
      data.</t>

      <t>Even though YANG is intend to ease the handling of data, this promise
      has not yet been fulfilled for Network Telemetry. From subscribing on a
      YANG datastore, publishing a YANG modeled notification message from the
      network and viewing the data in a time series database, manual labor is
      needed to perform a data transformation to make a message broker and its
      data processing components with YANG notifications interoparable.</t>

      <section anchor="Document_Scope" title="Document Scope">
        <t>This document focuses on <xref target="RFC8639">YANG-Push</xref> as
        the messaging protocol between the network node and the <xref
        target="RFC9232">Network Telemetry</xref> data collection since YANG
        push contains a subscription id describing the event stream filter of
        the subscribed YANG data. For a message broker and schema registry it
        focuses on Apache Kafka and <xref target="Con18">Confluent Schema
        Registry</xref> due its native capability to support different
        serializers and Schema languages, scales out well and being a de-facto
        standard for network operators today.</t>
      </section>

      <section anchor="Terminology" title="Terminology">
        <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
        "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
        "OPTIONAL" in this document are to be interpreted as described in BCP
        14 <xref target="RFC2119"/> <xref target="RFC8174"/> when, and only
        when, they appear in all capitals, as shown here.</t>

        <t>This document makes use of the terms defined in <xref
        target="RFC8639"/>, <xref target="Kaf11">Apache Kafka</xref> and <xref
        target="ConDoc18">Confluent Schema Registry Documentation</xref>.</t>

        <t>The following terms are used as defined in <xref
        target="RFC8639"/>.</t>

        <t><list style="symbols">
            <t>Publisher</t>

            <t>Receiver</t>

            <t>Subscription</t>

            <t>Subscription ID</t>

            <t>Event stream filter</t>

            <t>Notification message</t>
          </list></t>

        <t>The following terms are used as defined in <xref
        target="Kaf11">Apache Kafka</xref>.</t>

        <t><list style="symbols">
            <t>Producer</t>

            <t>Consumer</t>

            <t>Topic</t>

            <t>Partition</t>
          </list></t>

        <t>The following terms are used as defined in <xref
        target="ConDoc18">Confluent Schema Registry Documentation</xref>.</t>

        <t><list style="symbols">
            <t>Schema</t>

            <t>Schema ID</t>

            <t>Schema Registry</t>

            <t>Subject</t>
          </list></t>
      </section>

      <section anchor="Origins_of_YANG_Push" title="Origins of YANG-Push">
        <t>With <xref target="RFC3535"/> the IAB set the requirements for
        Network Management in 2003. From these requirements <xref
        target="RFC6241">NETCONF</xref>, <xref target="RFC5277">NETCONF
        Notifications</xref> and <xref target="RFC8040">Restconf</xref> has
        been defined to configure through &lt;edit-config&gt; and retrieve
        operational data through &lt;get&gt; and NETCONF notifications through
        &lt;notification&gt; from a YANG datastore on a network node.</t>

        <t>With YANG-Push, as defined in <xref target="RFC8639"/>, <xref
        target="RFC8640"/> and <xref target="RFC8641"/>, periodical and
        on-change subscriptions to the YANG datastore can be dynamically
        configured or statically configured. When dynamically configured,
        messages are being published in the established NETCONF session, where
        when statically configured messages are being published through <xref
        target="I-D.ietf-netconf-https-notif">HTTPS-based</xref> or <xref
        target="I-D.ietf-netconf-udp-notif">UDP-based</xref> transport.
        Section 3.7 of <xref target="RFC8641"/> describes push-update messages
        where the YANG subscribed data is being published, where Section 2.7
        of <xref target="RFC8639"/> describes the subscription state change
        notifications where changes in the subscription are being
        described.</t>
      </section>

      <section anchor="Origins_of_Apache_Kafka"
               title="Origins of Apache Kafka">
        <t><xref target="Kaf11">Apache Kafka</xref> messages can be produced
        into so called topics and consumed from. Each topic has one or more
        partitions where messages are replicated or loadbalanced to scale out.
        With the introduction of <xref target="Con18">Confluent Schema
        Registry</xref> a topic can contain one or more subjects. A subject
        refers to a Schema definition. The Schema definition or the Schema ID
        can be either prefixed to the message with the Apache Kafka
        serializer. If the Schema ID is prefixed, the Schema needs to be
        previously be registered through a REST API to the Confluent Schema
        Registry where a Schema ID is being issued. Messages can be validated
        against Schema when produced or consumed from topic to ensure Schema
        integrity of the message. The type of Schema evolution scheme can be
        defined per subject. Wherever non backward Schema changes are allowed
        or not.</t>
      </section>
    </section>

    <section anchor="Motivation" title="Motivation">
      <t>Text.</t>

      <section anchor="Preserve_Semantics" title="Preserve Semantics">
        <t>The preservation of the YANG semantics, that includes the YANG data
        types as defined in <xref target="RFC6991"/> and the nested structure
        of the YANG module, throughout the data processing chain ensures that
        metrics can be processed and visualized as they were originally
        intended. Not only for the user but also for an automated closed loop
        operation action.</t>
      </section>

      <section anchor="Preserve_Semantic_Information"
               title="Preserve Semantic Information">
        <t><xref target="RFC7950"/> defines in Section 7.21.3 and 7.21.4 the
        description and reference statement. This information is intended for
        the user, describing in a human-readable fashion the meaning of a
        definition. In Data Mesh, this information can be imported from the
        YANG Schema Registry into a Stream Catalog where subjects within
        Apache Kafka are identifyable and searchable. An example of a Stream
        Catalog is <xref target="Atl15">Apache Atlas</xref>. It can also be
        applied for time series data visualization in a similar fashion.</t>
      </section>

      <section anchor="Standardize_Data_Processing_Integration"
               title="Standardize Data Processing Integration">
        <t>Since the YANG Schema is preserved for operational metrics in
        Apache Kafka, a standartization for integration betwen network data
        collection and stream processor or time series database is
        implied.</t>
      </section>
    </section>

    <section anchor="Elements_of_the_Architecture"
             title="Elements of the Architecture">
      <t>The architecture consists of 6 elements.</t>

      <figure anchor="workflow_diagram" title="End to End Workflow">
        <artwork align="center"><![CDATA[
   +------------------------------------------------------------+
   |                    Time Series Database                    |
   +------------------------------------------------------------+
                                  ^
                                  | (11) Ingest Data
                                  | According to Schema
   +------------------------------------------------------------+
   |                Time Series Database Ingestion              |
   +------------------------------------------------------------+
(9) Get  |  ^                                   ^ (8) Validate Kafka Message
 Schema  |  |                                   | Against Schema on Consumer
         |  |                                   |
         |  |                                   |
         |  | (10) Issue                        | (7) Produce Kafka Message
         v  | Schema             (5) Post       | with Schema ID prefixed
   +--------------------+          Schema  +--------------------+
   |       YANG         | <--------------  |  Data Collection   |
   |  Schema Registry   | -------------->  | YANG-Push Receiver |
   +--------------------+ (6) Issue        +--------------------+
                          Schema ID     (3) Get |  ^ (2) Receive YANG-Push
                                         Schema |  | Subscription Start Message
                                                |  |   ^
                                                |  |   |
                                                |  |   | (4) Publish YANG-Push
                                                v  |   | Message with Subscription ID
   +--------------------+                  +--------------------+
   |      Network       | (1) Subscribe    |   Network Node     |
   |   Orchestration    | ---------------> | YANG-Push Publisher|
   +--------------------+                  +--------------------+
]]></artwork>
      </figure>

      <t>The <xref target="workflow_diagram">workflow diagram</xref> describes
      the steps from establishing the YANG-Push subscription to Time Series
      Database ingestion.</t>

      <section anchor="YANG_Push_Subscription" title="YANG-Push Subscription">
        <t>With step number (1) in the workflow diagram, a YANG-Push
        subscription is according to Section 2.4 and 2.5 of <xref
        target="RFC8639"/> dynamically or statically configured, and with step
        (2) subscription state change notifications are sent according to
        section 2.7 from the YANG-Push publisher to the receiver to inform
        which event stream filter has been applied to which subscription
        ID.</t>

        <t><xref target="I-D.ietf-netconf-yang-notifications-versioning"/>
        adds the capability to subscribe to a specific YANG module revision or
        a YANG module which needs to be backward compatible to in step (1) and
        adds the module name, revision and revision-label information into the
        subscription state change notifications in step (2).</t>
      </section>

      <section anchor="YANG_Push_Publisher" title="YANG-Push Publisher">
        <t>With step number (4) in the workflow diagram, a YANG-Push
        push-update or push-change-update message, depending on wherever
        periodical or on-change subscription has been established, is sent
        from the YANG-Push publisher to the receiver according to Section 3.7
        of <xref target="RFC8639"/>.</t>

        <t><xref target="I-D.ahuang-netconf-notif-yang"/> defines the NETCONF
        notification header specified in <xref target="RFC5277"/> in YANG to
        enable JSON and CBOR encoding.</t>

        <t><xref target="I-D.tgraf-netconf-notif-sequencing"/> adds sysName,
        messagePublisherId and sequenceNumber in the NETCONF notification
        header to each message to identify from which network node and
        publishing process, according to <xref
        target="I-D.ietf-netconf-distributed-notif"/> a network node with
        distributed architecture could have multiple messagePublisherId's, the
        message has been published from. The sequenceNumber enables to
        recognize loss from the YANG-Push publisher in step (1) down to the
        Time Series Database Ingestion in step (11).</t>

        <t><xref target="I-D.tgraf-netconf-yang-push-observation-time"/> adds
        observation-time or state-changed-observation-time in the YANG-Push
        push-update or push-change-update message, depending on wherever
        periodical or on-change subscription has been established.
        observation-time describes when the operational metrics was obtained
        from the YANG datastore. Where state-changed-observation-time
        describes when the network state change was observed.</t>
      </section>

      <section anchor="YANG_Push_Receiver" title="YANG-Push Receiver">
        <t>For all the YANG modules and revisions of each subscription ID in
        the subscription state change notification received in step number (3)
        in the workflow diagram, all the YANG module dependencies need to be
        determined through the <xref target="RFC8525">YANG Library</xref>, and
        then through NETCONF &lt;get-schema&gt; rpc calls according to <xref
        target="RFC6022"/> all YANG modules need to be retrieved as described
        in step (3) in the workflow diagram.</t>

        <t><xref target="I-D.lincla-netconf-yang-library-augmentation"/>
        extends the YANG Library so that not only the submodule but also the
        augmentation list can be obtained.</t>

        <t>The YANG data model for datastore push subscriptions is defined in
        Section 4.1 in <xref target="RFC8641"/>. Since the subscribed YANG
        data is referenced with datastore-subtree-filter or
        datastore-xpath-filter which where the anydata resp. xpath1.0
        statement is used to represent an unknown set of nodes as defined in
        Section 7.10 and subset of a namespace as defined in Section 6.4.1 of
        <xref target="RFC7950"/>. Where the namespace is defined in Section
        5.3 and Section 6.2.1 of <xref target="RFC7950"/> defines that all
        identifiers in a namespace MUST be unique. Section 5.5 in <xref
        target="RFC7951"/> describes how anydata in notifications are encoded
        where a description how to encode xpath1.0 is missing. Therefore the
        current understanding that with the anydata statement as a reference,
        semantics is lost where with xpath1.0 statement it is not. This will
        be further clarified in point number (1) in <xref
        target="Open_Points"/>.</t>

        <t>A new YANG module augmenting ietf-notification,
        ietf-subscribed-notifications and the referenced YANG data in
        datastore-subtree-filter or datastore-xpath-filter could re-establish
        semantics needed for Schema registration and also enable the
        possibility to add additional metadata such as the applied event
        stream filter, YANG module name, revision and revision-label from the
        subscription state change notifications as described in <xref
        target="YANG_Push_Subscription"/>.</t>
      </section>

      <section anchor="YANG_Schema_Registry" title="YANG Schema Registry">
        <t>Confluent Schema Registry is pluggable. Currently Supports AVRO,
        JSON Schema and Protobuf. The YANG support is being developed at <xref
        target="Yak24"/> as part of this architecture. Enable to register,
        obtain and compare <xref target="YSR24"/> YANG Schemas. One YANG
        Schema with all its augmentations is being registered per YANG-Push
        subscription ID. for each YANG Schema a locally significant Schema ID
        is being issued as described in step (6) in the workflow diagram.</t>

        <figure anchor="YSR_post_ietf-interfaces"
                title="Register ietf-interfaces.yang into YANG Schema Registry">
          <artwork><![CDATA[
curl -X POST -H "Content Type: application/vnd.schemaregistry.v1+json"
-d @ietf-interfaces@2018-02-20.json 
http://localhost:8081/subjects/ietf-interfaces/
        ]]></artwork>
        </figure>

        <figure anchor="YSR_list_all_subjects"
                title="List all subjects YANG Schema Registry">
          <artwork align="left"><![CDATA[
curl http://localhost:8081/subjects/ ubjects/ | jq
        ]]></artwork>
        </figure>

        <figure anchor="YSR_list_versions_of_a_subject"
                title="List versions of a given subject in YANG Schema Registry">
          <artwork><![CDATA[
curl http://localhost:8081/subjects/ietf-interfaces/versions
        ]]></artwork>
        </figure>

        <figure anchor="YSR_retrieve_schema_of_subject_version"
                title="Retrieve schema of a specific subject and version in YANG Schema Registry">
          <artwork><![CDATA[
curl http://localhost:8081/subjects/ietf-interfaces/versions/1
        ]]></artwork>
        </figure>
      </section>

      <section anchor="YANG_Kafka_Producer" title="YANG Kafka Producer">
        <t>The previously issued Schema ID is prefixed to the previously in
        <xref target="YANG_Push_Receiver"/> described metadata augmented YANG
        push push-update message and serialized to a Apache Kafka topic in
        step (7) of the workflow diagram.</t>
      </section>

      <section anchor="YANG_Kafka_Consumer" title="YANG Kafka Consumer">
        <t>From the Apache Kafka topic the message is being consumed and the
        prefixed Schema ID is being used in step (9) of the workflow diagram
        to retrieve the YANG Schema to validate the Schema integrity of the
        message.</t>
      </section>

      <section anchor="YANG_Time_Series_Database_Ingestion"
               title="YANG Time Series Database Ingestion">
        <t>The time series database ingestion specifications are being derived
        with the in <xref target="YANG_Kafka_Consumer"/> already retrieved
        Schema ID and YANG push-update messages can be now ingested and
        indexed into the database table according to their semantics.</t>
      </section>
    </section>

    <section anchor="Project_Milestones" title="Project Milestones">
      <t>IETF 115:</t>

      <ul>
        <li>Official Project Kickoff.</li>

        <li><xref target="I-D.ietf-netconf-yang-notifications-versioning"/>
        extends semantics reference in subscription state change
        notification.</li>
      </ul>

      <t>IETF 116:</t>

      <ul>
        <li>YANG module with augmentations can be registered in Confluent
        Schema Registry with YANG extension <xref target="Yak24"/>.</li>

        <li><xref target="I-D.tgraf-netconf-notif-sequencing"/> extends
        NETCONF notification header with sysName, messagePublisherId and
        sequenceNumber.</li>

        <li><xref target="I-D.tgraf-netconf-yang-push-observation-time"/>
        extends YANG-Push push-update or push-change-update message with
        observation-time or state-changed-observation-time.</li>

        <li><xref target="I-D.ahuang-netconf-notif-yang"/> defines the NETCONF
        notification header specified in <xref target="RFC5277"/> in
        YANG.</li>
      </ul>

      <t>IETF 118:</t>

      <ul>
        <li>All relevant YANG modules for a subscribed xpath can be determined
        through the <xref target="RFC8525">YANG Library</xref> and retrieved
        throug NETCONF &lt;get-schema&gt; rpc calls according to <xref
        target="RFC6022"/>. Gap in YANG library addressed in <xref
        target="I-D.lincla-netconf-yang-library-augmentation"/>.</li>
      </ul>
    </section>

    <section anchor="Open_Points" title="Open Points">
      <t>Lists all current open points to be either further researched and
      clarified or tested with running code.</t>

      <t>Note to the RFC-Editor: Please remove this section before
      publishing.</t>

      <dl newline="true">
        <dt>Open Point 1:</dt>

        <dd>Regarding Figure 8 in Section 4.1 of <xref target="RFC8641"/>.
        Clarify wherever with an anydata statement as a reference, semantics
        is lost where with xpath1.0 statement it is not. Propose solutions how
        semantics can be preserved on YANG-Push Publisher and when not
        preserved on YANG-Push Publisher how it could be restored on YANG-Push
        Receiver.</dd>

        <dt>Open Point 2:</dt>

        <dd>Test with running code wherever semantics can be restored by
        introducing a new YANG module augmenting at the YANG-Push receiver
        ietf-notification, ietf-subscribed-notifications and
        datastore-subtree-filter or datastore-xpath-filter referenced YANG
        modules and their dependencies.</dd>

        <dt>Open Point 3:</dt>

        <dd>Clarify wherever <xref target="RFC7951"/> is missing the
        definition how to encode xpath1.0 data node in YANG JSON.</dd>

        <dt>Open Point 4:</dt>

        <dd>Test with running code wherever with <xref
        target="I-D.ietf-netconf-yang-notifications-versioning"/> and <xref
        target="I-D.lincla-netconf-yang-library-augmentation"/> all
        datastore-subtree-filter or datastore-xpath-filter referenced YANG
        modules and their dependencies can be fully indentified.</dd>
      </dl>
    </section>

    <section anchor="Security" title="Security Considerations">
      <t>TBD</t>
    </section>

    <section anchor="Implementation" title="Implementation Status">
      <t>Note to the RFC-Editor: Please remove this section before
      publishing.</t>

      <section anchor="YANG_Schema_Registry_Extension"
               title="YANG Schema Registry Extension">
        <t>Ahmed Elhassany is developing a YANG Schema Extension in Confluent
        Schema Registry.</t>

        <t>The source code can be obtained here: <xref target="YSR24"/>, the
        progress report here: <xref target="YSRPR24"/>, and was validated at
        the IETF 117 hackathon.</t>
      </section>

      <section anchor="YANG-Push_Receiver_Parsing_Library"
               title="YANG-Push Receiver Parsing Library">
        <t>Zhuoyao Lin developed as part of her internship a library to parse
        YANG-Push subscription notifications, identify YANG module
        dependencises with <xref target="RFC8525">YANG Library</xref> and
        obtain with NETCONF &lt;get-schema&gt; rpc calls <xref
        target="RFC6022"/> all YANG modules from YANG-Push publisher.</t>

        <t>The source code can be obtained here: <xref target="LYP23"/> and
        was validated at the IETF 117 hackathon.</t>
      </section>
    </section>

    <section anchor="Acknowledgements" title="Acknowledgements">
      <t>The authors would like to thank Yannick Buchs and Benoit Claise for
      their review and valuable comments, Ahmed Elhassany and Zhuoyao Lin for
      contributing code and Alex Huang Feng for providing examples and inputs
      for the open points.</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      <?rfc include='reference.RFC.2119'?>

      <?rfc include='reference.RFC.6022'?>

      <?rfc include='reference.RFC.7950'?>

      <?rfc include='reference.RFC.7951'?>

      <?rfc include='reference.RFC.8174'?>

      <?rfc include='reference.RFC.8639'?>

      <?rfc include='reference.RFC.8641'?>

      <?rfc include='reference.I-D.tgraf-netconf-notif-sequencing'?>

      <?rfc include='reference.I-D.tgraf-netconf-yang-push-observation-time'?>

      <?rfc include='reference.I-D.lincla-netconf-yang-library-augmentation'?>

      <?rfc include='reference.I-D.ahuang-netconf-notif-yang'?>

      <?rfc include='reference.I-D.ietf-netconf-yang-notifications-versioning'?>

      <reference anchor="YSR24"
                 target="https://github.com/confluentinc/schema-registry-yang-format/">
        <front>
          <title>YANG Schema Registry Extension</title>

          <author fullname="Ahmed Elhassany" initials="A." surname="Elhassany"/>

          <date month="February" year="2024"/>
        </front>

        <refcontent>Apache Software Foundation</refcontent>
      </reference>

      <reference anchor="YSRPR24"
                 target="https://github.com/network-analytics/draft-daisy-kafka-yang-integration/blob/main/YANG%20Schema%20registry%20integration.pdf">
        <front>
          <title>YANG Schema Registry Extension Progress Report</title>

          <author fullname="Ahmed Elhassany" initials="A." surname="Elhassany"/>

          <date month="February" year="2024"/>
        </front>
      </reference>

      <reference anchor="LYP23"
                 target="https://github.com/network-analytics/libyangpush/">
        <front>
          <title>libyangpush</title>

          <author fullname="Zhuoyao Lin" initials="Z." surname="Lin"/>

          <date month="September" year="2023"/>
        </front>

        <refcontent>Apache Software Foundation</refcontent>
      </reference>

      <reference anchor="Yak24"
                 target="https://github.com/yang-central/yangkit/">
        <front>
          <title>Yangkit</title>

          <author fullname="Frank Feng" initials="F." surname="Feng"/>

          <date month="February" year="2024"/>
        </front>

        <refcontent>Apache Software Foundation</refcontent>
      </reference>

      <reference anchor="Kaf11" target="https://kafka.apache.org/">
        <front>
          <title>Apache Kafka</title>

          <author fullname="Neha Narkhede" initials="N." surname="Narkhede"/>

          <date month="January" year="2011"/>
        </front>

        <refcontent>Apache Software Foundation</refcontent>
      </reference>

      <reference anchor="Con18"
                 target="https://github.com/confluentinc/schema-registry/">
        <front>
          <title>Confluent Schema Registry</title>

          <author fullname="Robert Yokota" initials="R." surname="Yokota"/>

          <date month="December" year="2018"/>
        </front>

        <refcontent>Confluent Community and Apache Software
        Foundation</refcontent>
      </reference>

      <reference anchor="ConDoc18"
                 target="https://docs.confluent.io/platform/current/schema-registry/">
        <front>
          <title>Confluent Schema Registry Documentation</title>

          <author fullname="Robert Yokota " initials="R." surname="Yokota"/>

          <date month="December" year="2018"/>
        </front>

        <refcontent>Confluent Community and Apache Software
        Foundation</refcontent>
      </reference>
    </references>

    <references title="Informative References">
      <?rfc include='reference.RFC.3535'?>

      <?rfc include='reference.RFC.5277'?>

      <?rfc include='reference.RFC.6241'?>

      <?rfc include='reference.RFC.6991'?>

      <?rfc include='reference.RFC.8040'?>

      <?rfc include='reference.RFC.8525'?>

      <?rfc include='reference.RFC.8640'?>

      <?rfc include='reference.RFC.9232'?>

      <?rfc include='reference.I-D.ietf-netconf-https-notif'?>

      <?rfc include='reference.I-D.ietf-netconf-udp-notif'?>

      <?rfc include='reference.I-D.ietf-netconf-distributed-notif'?>

      <reference anchor="Deh22"
                 target="https://www.oreilly.com/library/view/data-mesh/9781492092384/">
        <front>
          <title>Data Mesh</title>

          <author fullname="Zhamak Dehghani" initials="Z." surname="Dehghani"/>

          <date month="March" year="2022"/>
        </front>

        <seriesInfo name="ISBN" value="9781492092391"/>

        <refcontent>O'Reilly Media</refcontent>
      </reference>

      <reference anchor="Rab07" target="https://rabbitmq.com/">
        <front>
          <title>RabbitMQ</title>

          <author fullname="VMware"/>

          <date month="February" year="2007"/>
        </front>

        <refcontent>Mozilla Public License</refcontent>
      </reference>

      <reference anchor="Atl15" target="https://atlas.apache.org/">
        <front>
          <title>Apache Atlas</title>

          <author fullname="Hortonworks"/>

          <date month="May" year="2015"/>
        </front>

        <refcontent>Apache Software Foundation</refcontent>
      </reference>
    </references>
  </back>
</rfc>
